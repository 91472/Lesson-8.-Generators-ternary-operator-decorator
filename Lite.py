# Урок: Генераторы, тернарные операторы, исключения, декораторы
# Задание Lite:
#1. Выполнить задание уровня ultra-light
#2. Написать декоратор, замеряющий время выполнение декорируемой функции.
#3. Сравнить время создания генератора и списка с элементами: натуральные числа
#от 1 до 1000000 (создание объектов оформить в виде функций).


# Выполнение задания Ultra Lite:
#1. Задание уровня ultra-light выполнено: https://github.com/91472/Lesson-8.-Generators-ternary-operator-decorator/blob/454aaf9c0c8f8300bc0ed22ad95427bed65528d1/Ultra-lite.py

#2. Написать декоратор, замеряющий время выполнение декорируемой функции.
import time
#декоратор-счетчик времени выполнения функции:
def fun_timer(f):
    def wrapper(*args, **kwargs):
        start_time = time.perf_counter_ns()
        f(*args, **kwargs)
        timer = time.perf_counter_ns()-start_time
        return timer
    return wrapper

#пример декорируемой функции, генерирующей список квадратов чисел от 1 до num:
def sq_list(num):
    return [i**2 for i in range(1, num+1)]

#применение декоратора-счетчика к функции sq_list:
@fun_timer
def sq_list(num):
    return [i**2 for i in range(1, num+1)]

#вызов функции с декоратором:
print('Для задания №2 время выполнения функции, ns: ', sq_list(10))


#3. Сравнить время создания генератора и списка с элементами: натуральные числа
#от 1 до 1 000 000 (создание объектов оформить в виде функций).

#создадим функцию-генератор последовательности из списка элементов из натуральных числе от 1 до 1 000 000:
def gen_list_num():
    return [i for i in range(1, 1000001)]
#создадим функцию-генератор для генерации элементов из списка натуральных числе от 1 до 1 000 000:
def gen_num():
    for i in range(1, 1000001):
        yield i


#создадим функцию генерирующую последовательность стандартным способом циклом for для натуральных числе от 1 до 1 000 000:
def gen_list_standart():
    lst = []
    for i in range(1, 1000001):
        lst.append(i)
    return lst
#задекорируем обе функции для сравнение времени их создания:
@fun_timer
def gen_list_num():
    return [i for i in range(1, 1000001)]

@fun_timer
def gen_num():
    for i in range(1, 100):
        yield i

@fun_timer
def gen_list_standart():
    lst = []
    for i in range(1, 1000001):
        lst.append(i)
    return lst


print('\nДля генератора-последовательности из списка от 1 до 1 000 000, ns:', gen_list_num())
print('\nДля генератора из списка от 1 до 1 000 000, ns:', gen_num())
print('\nДля функции-генератора стандартным способ через цикл for списка от 1 до 1 000 000, ns:', gen_list_standart())
print('\nВремя создания списка генератором последовательности в {} раз больше, чем время создания генератора'.format(gen_list_num()//gen_num()))
print('\nВремя создания списка стандартным методом цикла for в {} раз больше, чем время созданием генератором последовательности'.format(round(gen_list_standart()/gen_list_num(), 1)))

#print(list(gen_num())) #вывод полностью списка от генератора, без next и без for